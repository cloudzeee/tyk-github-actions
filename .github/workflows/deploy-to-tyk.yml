name: Deploy to Tyk

on:
  push:
    branches: [ main ]
    paths:
      - 'api-definitions/**'
      - 'policies/**'
      - '.github/workflows/deploy-to-tyk.yml'
  workflow_dispatch:

jobs:
  deploy-to-tyk:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check Tyk services
      run: |
        echo "Checking Tyk services..."
        
        if curl -f -s http://localhost:3000/hello > /dev/null 2>&1; then
          echo "‚úÖ Tyk Dashboard is responding"
        else
          echo "‚ùå Tyk Dashboard not responding at http://localhost:3000"
          echo "Please start your Tyk services first"
          exit 1
        fi
        
        if curl -f -s http://localhost:8080/hello > /dev/null 2>&1; then
          echo "‚úÖ Tyk Gateway is responding"  
        else
          echo "‚ùå Tyk Gateway not responding at http://localhost:8080"
          exit 1
        fi
    
    - name: Validate API definitions
      run: |
        echo "Validating API definitions..."
        
        if ! ls api-definitions/*.json 1> /dev/null 2>&1; then
          echo "‚ÑπÔ∏è  No API definitions found to deploy"
          exit 0
        fi
        
        for file in api-definitions/*.json; do
          echo "Validating $(basename $file)..."
          if python3 -m json.tool "$file" > /dev/null 2>&1; then
            echo "‚úÖ $(basename $file) is valid JSON"
          else
            echo "‚ùå $(basename $file) is invalid JSON"
            exit 1
          fi
        done
    
    - name: Deploy APIs to Tyk
      run: |
        echo "üöÄ Starting API deployment..."
        
        deployed_count=0
        failed_count=0
        
        for file in api-definitions/*.json; do
          if [ -f "$file" ]; then
            api_name=$(basename "$file" .json)
            echo ""
            echo "üì¶ Deploying $api_name..."
            
            # Replace org_id placeholder if it exists
            temp_file=$(mktemp)
            if [ -n "${{ secrets.TYK_LOCAL_ORG_ID }}" ]; then
              sed "s/REPLACE_WITH_YOUR_ORG_ID/${{ secrets.TYK_LOCAL_ORG_ID }}/g" "$file" > "$temp_file"
            else
              cp "$file" "$temp_file"
            fi
            
            echo "API definition to deploy:"
            cat "$temp_file" | python3 -m json.tool
            echo "---"
            
            # Deploy to Tyk Dashboard
            response=$(curl -s -w "%{http_code}" -o /tmp/deploy_response.json \
              -X POST \
              -H "Authorization: ${{ secrets.TYK_LOCAL_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d @"$temp_file" \
              "http://localhost:3000/api/apis")
            
            http_code=$(tail -n1 <<< "$response")
            
            echo "Response HTTP Code: $http_code"
            echo "Response Body:"
            cat /tmp/deploy_response.json | python3 -m json.tool 2>/dev/null || cat /tmp/deploy_response.json
            echo ""
            
            if [[ $http_code == "200" || $http_code == "201" ]]; then
              echo "‚úÖ Successfully deployed $api_name"
              deployed_count=$((deployed_count + 1))
            else
              echo "‚ùå Failed to deploy $api_name"
              failed_count=$((failed_count + 1))
            fi
            
            rm -f "$temp_file"
          fi
        done
        
        echo ""
        echo "üìä Deployment Summary:"
        echo "   ‚úÖ Deployed: $deployed_count APIs"
        echo "   ‚ùå Failed: $failed_count APIs"
        
        if [ $failed_count -gt 0 ]; then
          exit 1
        fi
    
    - name: Hot reload Tyk Gateway
      run: |
        echo "üîÑ Reloading Tyk Gateway..."
        
        reload_response=$(curl -s -w "%{http_code}" -o /tmp/reload_response.json \
          -X GET \
          -H "Authorization: ${{ secrets.TYK_LOCAL_API_KEY }}" \
          "http://localhost:3000/api/reload/group")
        
        reload_code=$(tail -n1 <<< "$reload_response")
        
        echo "Reload Response Code: $reload_code"
        cat /tmp/reload_response.json 2>/dev/null || echo "No response body"
        
        if [[ $reload_code == "200" ]]; then
          echo "‚úÖ Gateway reloaded successfully"
        else
          echo "‚ö†Ô∏è  Gateway reload returned HTTP $reload_code (might still work)"
        fi
    
    - name: Test deployed APIs
      run: |
        echo "üß™ Testing deployed APIs..."
        sleep 2  # Wait for reload to complete
        
        # List APIs in Tyk to verify deployment
        echo "APIs now in Tyk Dashboard:"
        curl -s -H "Authorization: ${{ secrets.TYK_LOCAL_API_KEY }}" \
          "http://localhost:3000/api/apis" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    if 'apis' in data:
        for api in data['apis']:
            print(f\"  - {api.get('name', 'Unknown')} (ID: {api.get('api_id', 'Unknown')})\")
    else:
        print('  No APIs found or unexpected response format')
except:
    print('  Could not parse API list')
"
        
        echo ""
        echo "üéâ Deployment completed!"
        echo "   Dashboard: http://localhost:3000"
        echo "   Gateway: http://localhost:8080"
