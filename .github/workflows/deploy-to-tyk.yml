name: Deploy to Tyk

on:
  push:
    branches: [ main ]
    paths:
      - 'api-definitions/**'
      - 'policies/**'
  workflow_dispatch:

jobs:
  deploy-to-tyk:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check Tyk services
      run: |
        echo "Checking Tyk services..."
        
        # Check Dashboard (no timeout needed)
        if curl -f -s ${{ secrets.TYK_LOCAL_DASHBOARD_URL }}/hello > /dev/null 2>&1; then
          echo "✅ Tyk Dashboard is responding"
        else
          echo "❌ Tyk Dashboard not responding at ${{ secrets.TYK_LOCAL_DASHBOARD_URL }}"
          echo "Please make sure Tyk is running locally"
          exit 1
        fi
        
        # Check Gateway
        if curl -f -s ${{ secrets.TYK_LOCAL_GATEWAY_URL }}/hello > /dev/null 2>&1; then
          echo "✅ Tyk Gateway is responding"
        else
          echo "❌ Tyk Gateway not responding at ${{ secrets.TYK_LOCAL_GATEWAY_URL }}"
          echo "Please make sure Tyk Gateway is running locally"
          exit 1
        fi
    
    - name: Deploy APIs
      run: |
        echo "Deploying API definitions..."
        
        for file in api-definitions/*.json; do
          if [ -f "$file" ]; then
            echo "Deploying $(basename $file)..."
            
            # Replace ORG_ID placeholder if it exists
            temp_file=$(mktemp)
            sed "s/REPLACE_WITH_YOUR_ORG_ID/${{ secrets.TYK_LOCAL_ORG_ID }}/g" "$file" > "$temp_file"
            
            echo "API definition content:"
            cat "$temp_file"
            echo "---"
            
            # Deploy to Tyk
            response=$(curl -s -w "%{http_code}" -o /tmp/response.json \
              -X POST \
              -H "Authorization: ${{ secrets.TYK_LOCAL_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d @"$temp_file" \
              "${{ secrets.TYK_LOCAL_DASHBOARD_URL }}/api/apis")
            
            http_code=$(tail -n1 <<< "$response")
            
            echo "Response code: $http_code"
            echo "Response body:"
            cat /tmp/response.json
            
            if [[ $http_code == "200" || $http_code == "201" ]]; then
              echo "✅ Successfully deployed $(basename $file)"
            else
              echo "❌ Failed to deploy $(basename $file) - HTTP $http_code"
              exit 1
            fi
            
            rm -f "$temp_file"
          fi
        done
    
    - name: Reload Gateway
      run: |
        echo "Reloading Tyk Gateway..."
        reload_response=$(curl -s -w "%{http_code}" -o /tmp/reload.json \
          -X GET \
          -H "Authorization: ${{ secrets.TYK_LOCAL_API_KEY }}" \
          "${{ secrets.TYK_LOCAL_DASHBOARD_URL }}/api/reload/group")
        
        reload_code=$(tail -n1 <<< "$reload_response")
        echo "Reload response: $reload_code"
        
        if [[ $reload_code == "200" ]]; then
          echo "✅ Gateway reloaded successfully"
        else
          echo "⚠️  Reload returned HTTP $reload_code"
        fi
